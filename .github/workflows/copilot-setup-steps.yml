name: "BrainSAIT LINC Agents - Copilot Setup Steps"

# Automatically run setup when workflow changes, and allow manual testing
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    # Set minimal required permissions for multi-language ecosystem setup
    permissions:
      contents: read
      packages: read

    # Database and supporting services for healthcare agents
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: brainsait_test
          POSTGRES_DB: brainsait_agents
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout BrainSAIT LINC repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create requirements.txt for Python dependencies
        run: |
          cat > requirements.txt << 'EOF'
          # Core Web Framework
          fastapi==0.104.1
          uvicorn[standard]==0.24.0
          pydantic==2.5.0
          python-multipart==0.0.6
          aiofiles==23.2.1
          
          # Database
          sqlalchemy==2.0.23
          alembic==1.13.1
          asyncpg==0.29.0
          redis==5.0.1
          
          # Healthcare & FHIR
          fhir.resources==7.0.2
          hl7apy==1.3.4
          
          # AI & Machine Learning
          torch==2.1.1
          transformers==4.36.0
          openai==1.3.7
          anthropic==0.7.7
          
          # Speech Processing
          openai-whisper==20231117
          TTS==0.22.0
          librosa==0.10.1
          soundfile==0.12.1
          SpeechRecognition==3.10.0
          pyaudio==0.2.11
          
          # Arabic NLP
          nltk==3.8.1
          spacy==3.7.2
          arabic-reshaper==3.0.0
          python-bidi==0.4.2
          
          # Task Queue & Background Jobs
          celery==5.3.4
          
          # HTTP Client
          httpx==0.25.2
          requests==2.31.0
          
          # Integration APIs
          docker==6.1.3
          kubernetes==28.1.0
          cloudflare==2.11.1
          notion-client==2.2.1
          tweepy==4.14.0
          python-telegram-bot==20.7
          
          # Automation
          schedule==1.2.0
          
          # Development & Testing
          pytest==7.4.3
          pytest-asyncio==0.21.1
          black==23.11.0
          flake8==6.1.0
          mypy==1.7.1
          
          # Configuration
          python-dotenv==1.0.0
          pyyaml==6.0.1
          
          # Utilities
          jinja2==3.1.2
          pillow==10.1.0
          qrcode==7.4.2
          pdf2image==1.16.3
          python-dateutil==2.8.2
          EOF

      - name: Create package.json for Node.js dependencies
        run: |
          cat > package.json << 'EOF'
          {
            "name": "brainsait-linc-web",
            "version": "1.0.0",
            "description": "BrainSAIT LINC Web Interfaces",
            "main": "index.js",
            "scripts": {
              "dev": "vite",
              "build": "vite build",
              "preview": "vite preview",
              "lint": "eslint . --ext js,jsx,ts,tsx",
              "format": "prettier --write ."
            },
            "dependencies": {
              "alpinejs": "^3.13.3",
              "@tailwindcss/forms": "^0.5.7",
              "@tailwindcss/typography": "^0.5.10",
              "axios": "^1.6.2",
              "socket.io-client": "^4.7.4"
            },
            "devDependencies": {
              "@types/node": "^20.9.4",
              "@typescript-eslint/eslint-plugin": "^6.13.1",
              "@typescript-eslint/parser": "^6.13.1",
              "autoprefixer": "^10.4.16",
              "eslint": "^8.54.0",
              "eslint-config-prettier": "^9.0.0",
              "postcss": "^8.4.32",
              "prettier": "^3.1.0",
              "tailwindcss": "^3.3.6",
              "typescript": "^5.3.2",
              "vite": "^5.0.4"
            },
            "keywords": [
              "healthcare",
              "ai",
              "agents", 
              "arabic",
              "fhir"
            ],
            "author": "Dr. Fadil <fadil@brainsait.io>",
            "license": "MIT"
          }
          EOF

      - name: Set up Python 3.11 for healthcare agents
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          # Remove cache initially since requirements.txt is generated in workflow

      - name: Set up Node.js 20 for web interfaces
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # Remove cache initially since package.json is generated in workflow

      - name: Generate npm lock file and install dependencies
        run: |
          # Install Node.js dependencies and generate package-lock.json
          npm install
          
          # Verify lock file was created
          if [ -f "package-lock.json" ]; then
            echo "✅ package-lock.json generated successfully"
            ls -la package-lock.json
          else
            echo "❌ Failed to generate package-lock.json"
            exit 1
          fi

      - name: Install system dependencies for AI/ML and Arabic processing
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            ffmpeg \
            libsndfile1 \
            libportaudio2 \
            libasound-dev \
            portaudio19-dev \
            python3-pyaudio \
            espeak \
            espeak-data \
            libespeak1 \
            libespeak-dev \
            festival \
            sqlite3 \
            libsqlite3-dev \
            postgresql-client \
            redis-tools \
            jq \
            unzip \
            curl \
            wget

      - name: Install Docker for containerized agents
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker $USER

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Install additional JavaScript tools globally
        run: |
          npm install -g @tailwindcss/cli

      - name: Download Arabic language models and data
        run: |
          python -c "import nltk; nltk.download('punkt', quiet=True)" || echo "NLTK punkt download failed"
          python -c "import nltk; nltk.download('stopwords', quiet=True)" || echo "NLTK stopwords download failed"
          
          # Create models directory
          mkdir -p ./models/arabic
          
          # Download Arabic NLP resources (fallback gracefully if unavailable)
          wget -O ./models/arabic/ar_lexicon.txt \
            https://raw.githubusercontent.com/CAMeL-Lab/camel_tools/master/camel_tools/data/lexicons/msa_lexicon.txt \
            || echo "⚠️  Arabic lexicon download failed - will use fallback during runtime"

      - name: Set up project structure and configuration
        run: |
          echo "📁 Creating BrainSAIT LINC project structure..."
          
          # Create agent directories for all 16 agents
          mkdir -p agents/{masterlinc,authlinc,doctorlinc,nurslinc,patientlinc,careteamlinc}
          mkdir -p agents/{bizlinc,paylinc,insightlinc,oidlinc}
          mkdir -p agents/{devlinc,autolinc,codelinc}
          mkdir -p agents/{medialinc,edulinc,chatlinc}
          
          # Create shared components
          mkdir -p shared/{auth,database,messaging,monitoring,models,utils,config}
          
          # Create infrastructure
          mkdir -p infra/{docker,kubernetes,cloudflare,scripts,terraform}
          
          # Create UI directories
          mkdir -p ui/{web,mobile,desktop,components,assets}
          
          # Create documentation
          mkdir -p docs/{api,deployment,user-guides,agents,architecture}
          
          # Create data directories
          mkdir -p data/{temp,uploads,exports,models,backups}
          
          # Create logs
          mkdir -p logs/{agents,system,audit,performance}
          
          # Create tests
          mkdir -p tests/{unit,integration,agents,e2e}
          
          # Create configuration directories
          mkdir -p config/{environments,agents,services}
          
          echo "✅ Project structure created with $(find . -type d | wc -l) directories"

      - name: Create environment configuration files
        run: |
          # Main environment configuration
          cat > .env.example << 'EOF'
          # Environment
          ENVIRONMENT=development
          DEBUG=true
          LOG_LEVEL=INFO
          
          # Database Configuration
          DATABASE_URL=postgresql://postgres:brainsait_test@localhost:5432/brainsait_agents
          REDIS_URL=redis://localhost:6379/0
          
          # API Keys (Set these in production)
          OPENAI_API_KEY=your_openai_key_here
          ANTHROPIC_API_KEY=your_anthropic_key_here
          CLOUDFLARE_API_TOKEN=your_cloudflare_token_here
          
          # Healthcare Integration
          FHIR_BASE_URL=https://fhir.brainsait.io
          NPHIES_BASE_URL=https://nphies.sa
          SAUDI_MOH_API_URL=https://api.moh.gov.sa
          
          # Agent Ports (8000-8099 range)
          MASTER_LINC_PORT=8000
          AUTH_LINC_PORT=8001
          DOCTOR_LINC_PORT=8010
          NURSE_LINC_PORT=8011
          PATIENT_LINC_PORT=8012
          CARETEAM_LINC_PORT=8013
          BIZ_LINC_PORT=8020
          PAY_LINC_PORT=8021
          INSIGHT_LINC_PORT=8022
          OID_LINC_PORT=8023
          DEV_LINC_PORT=8030
          AUTO_LINC_PORT=8031
          CODE_LINC_PORT=8032
          MEDIA_LINC_PORT=8040
          EDU_LINC_PORT=8041
          CHAT_LINC_PORT=8042
          
          # Security
          JWT_SECRET=your_jwt_secret_here_min_32_chars
          ENCRYPTION_KEY=your_encryption_key_here_32_bytes
          SESSION_SECRET=your_session_secret_here
          
          # Storage
          UPLOAD_PATH=./data/uploads
          MODEL_PATH=./models
          BACKUP_PATH=./data/backups
          
          # External Services
          APPLE_TEAM_ID=your_apple_team_id
          WHATSAPP_BUSINESS_API_KEY=your_whatsapp_key
          TELEGRAM_BOT_TOKEN=your_telegram_token
          
          # Monitoring
          SENTRY_DSN=your_sentry_dsn
          PROMETHEUS_PORT=9090
          GRAFANA_PORT=3000
          EOF
          
          # Copy example to working env for development
          cp .env.example .env
          
          # Create agent-specific config template
          cat > config/agents/agent-config.template.yml << 'EOF'
          # BrainSAIT LINC Agent Configuration Template
          agent:
            id: "AGENT_ID"
            name: "AGENT_NAME"
            version: "1.0.0"
            category: "healthcare" # healthcare, business, automation, content
            
          metadata:
            description: "Agent description"
            author: "BrainSAIT Team"
            created: "2025-01-01"
            languages: ["ar", "en"]
            
          capabilities:
            nlp:
              speech_to_text: true
              text_to_speech: true
              multilingual: true
              arabic_support: true
            
            integrations:
              fhir: false
              apple_health: false
              whatsapp: false
              telegram: false
              
          deployment:
            subdomain: "AGENT_ID.brainsait.io"
            port: 8000
            health_endpoint: "/health"
            metrics_endpoint: "/metrics"
            
          resources:
            memory_limit: "512Mi"
            cpu_limit: "500m"
            storage: "1Gi"
            
          monitoring:
            logging_level: "INFO"
            metrics_enabled: true
            tracing_enabled: true
            health_checks: true
          EOF

      - name: Create Docker infrastructure templates
        run: |
          # Main Docker Compose for development
          cat > docker-compose.dev.yml << 'EOF'
          version: '3.8'
          
          services:
            # Core Infrastructure
            postgres:
              image: postgres:15-alpine
              container_name: brainsait_postgres
              environment:
                POSTGRES_DB: brainsait_agents
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: brainsait_test
              ports:
                - "5432:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
                - ./infra/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5
              networks:
                - brainsait_network
            
            redis:
              image: redis:7-alpine
              container_name: brainsait_redis
              ports:
                - "6379:6379"
              volumes:
                - redis_data:/data
                - ./infra/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
              command: redis-server /usr/local/etc/redis/redis.conf
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 10s
                timeout: 5s
                retries: 5
              networks:
                - brainsait_network
            
            # Message Queue
            rabbitmq:
              image: rabbitmq:3-management-alpine
              container_name: brainsait_rabbitmq
              environment:
                RABBITMQ_DEFAULT_USER: brainsait
                RABBITMQ_DEFAULT_PASS: brainsait_test
              ports:
                - "5672:5672"
                - "15672:15672"
              volumes:
                - rabbitmq_data:/var/lib/rabbitmq
              networks:
                - brainsait_network
            
            # Monitoring
            prometheus:
              image: prom/prometheus:latest
              container_name: brainsait_prometheus
              ports:
                - "9090:9090"
              volumes:
                - ./infra/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
                - prometheus_data:/prometheus
              networks:
                - brainsait_network
            
            # Master Orchestration Agent
            masterlinc:
              build: 
                context: ./agents/masterlinc
                dockerfile: Dockerfile
              container_name: brainsait_masterlinc
              ports:
                - "8000:8000"
              environment:
                - DATABASE_URL=postgresql://postgres:brainsait_test@postgres:5432/brainsait_agents
                - REDIS_URL=redis://redis:6379/0
                - RABBITMQ_URL=amqp://brainsait:brainsait_test@rabbitmq:5672/
                - ENVIRONMENT=development
                - LOG_LEVEL=INFO
              depends_on:
                postgres:
                  condition: service_healthy
                redis:
                  condition: service_healthy
              volumes:
                - ./agents/masterlinc:/app
                - ./shared:/app/shared
                - ./data:/app/data
                - ./logs:/app/logs
              networks:
                - brainsait_network
              restart: unless-stopped
            
            # Authentication Agent
            authlinc:
              build: ./agents/authlinc
              container_name: brainsait_authlinc
              ports:
                - "8001:8001"
              environment:
                - DATABASE_URL=postgresql://postgres:brainsait_test@postgres:5432/brainsait_agents
                - REDIS_URL=redis://redis:6379/1
                - MASTER_LINC_URL=http://masterlinc:8000
              depends_on:
                - masterlinc
              networks:
                - brainsait_network
              restart: unless-stopped
            
            # Healthcare Agents
            doctorlinc:
              build: ./agents/doctorlinc
              container_name: brainsait_doctorlinc
              ports:
                - "8010:8010"
              environment:
                - DATABASE_URL=postgresql://postgres:brainsait_test@postgres:5432/brainsait_agents
                - REDIS_URL=redis://redis:6379/2
                - MASTER_LINC_URL=http://masterlinc:8000
                - AUTH_LINC_URL=http://authlinc:8001
              depends_on:
                - masterlinc
                - authlinc
              volumes:
                - ./models:/app/models
              networks:
                - brainsait_network
              restart: unless-stopped
          
          volumes:
            postgres_data:
              driver: local
            redis_data:
              driver: local
            rabbitmq_data:
              driver: local
            prometheus_data:
              driver: local
          
          networks:
            brainsait_network:
              driver: bridge
              name: brainsait_network
          EOF
          
          # Create individual agent Dockerfile template
          cat > agents/Dockerfile.template << 'EOF'
          FROM python:3.11-slim
          
          # Set working directory
          WORKDIR /app
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              build-essential \
              curl \
              ffmpeg \
              libsndfile1 \
              portaudio19-dev \
              && rm -rf /var/lib/apt/lists/*
          
          # Copy requirements and install Python dependencies
          COPY requirements.txt .
          RUN pip install --no-cache-dir --upgrade pip && \
              pip install --no-cache-dir -r requirements.txt
          
          # Copy shared modules
          COPY ../shared ./shared
          
          # Copy agent-specific code
          COPY . .
          
          # Create non-root user for security
          RUN useradd -m -u 1000 agent && \
              chown -R agent:agent /app && \
              mkdir -p /app/logs /app/data && \
              chown -R agent:agent /app/logs /app/data
          
          USER agent
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
              CMD curl -f http://localhost:${PORT:-8000}/health || exit 1
          
          # Expose port (will be overridden by specific agents)
          EXPOSE ${PORT:-8000}
          
          # Default command (will be overridden by specific agents)
          CMD ["python", "main.py"]
          EOF

      - name: Create healthcare compliance and FHIR templates
        run: |
          mkdir -p templates/{fhir,nphies,saudi-moh}
          
          # Enhanced FHIR Patient template with Saudi compliance
          cat > templates/fhir/saudi_patient_template.json << 'EOF'
          {
            "resourceType": "Patient",
            "id": "saudi-patient-template",
            "meta": {
              "profile": ["http://brainsait.io/fhir/StructureDefinition/SaudiPatient"],
              "lastUpdated": "2025-01-01T00:00:00Z"
            },
            "language": "ar-SA",
            "extension": [
              {
                "url": "http://brainsait.io/fhir/StructureDefinition/national-id",
                "valueIdentifier": {
                  "system": "http://moh.gov.sa/nationalid",
                  "value": "TEMPLATE_NATIONAL_ID"
                }
              },
              {
                "url": "http://brainsait.io/fhir/StructureDefinition/patient-religion",
                "valueCodeableConcept": {
                  "coding": [{
                    "system": "http://terminology.hl7.org/CodeSystem/v3-ReligiousAffiliation",
                    "code": "1013",
                    "display": "Muslim"
                  }]
                }
              }
            ],
            "identifier": [
              {
                "type": {
                  "coding": [{
                    "system": "http://terminology.hl7.org/CodeSystem/v2-0203",
                    "code": "NI",
                    "display": "National identifier"
                  }]
                },
                "system": "http://moh.gov.sa/nationalid",
                "value": "TEMPLATE_NATIONAL_ID"
              }
            ],
            "active": true,
            "name": [
              {
                "use": "official",
                "family": "TEMPLATE_FAMILY_NAME_AR",
                "given": ["TEMPLATE_GIVEN_NAME_AR"],
                "extension": [
                  {
                    "url": "http://hl7.org/fhir/StructureDefinition/humanname-fathers-family",
                    "valueString": "TEMPLATE_FATHER_NAME_AR"
                  },
                  {
                    "url": "http://hl7.org/fhir/StructureDefinition/humanname-mothers-family", 
                    "valueString": "TEMPLATE_MOTHER_NAME_AR"
                  }
                ]
              },
              {
                "use": "official",
                "family": "TEMPLATE_FAMILY_NAME_EN",
                "given": ["TEMPLATE_GIVEN_NAME_EN"]
              }
            ],
            "telecom": [
              {
                "system": "phone",
                "value": "+966XXXXXXXXX",
                "use": "mobile",
                "rank": 1
              },
              {
                "system": "email",
                "value": "patient@example.com",
                "use": "home"
              }
            ],
            "gender": "unknown",
            "birthDate": "YYYY-MM-DD",
            "address": [
              {
                "use": "home",
                "type": "both",
                "line": ["TEMPLATE_ADDRESS_LINE"],
                "city": "TEMPLATE_CITY",
                "district": "TEMPLATE_DISTRICT",
                "state": "TEMPLATE_REGION",
                "postalCode": "TEMPLATE_POSTAL_CODE",
                "country": "SA"
              }
            ],
            "maritalStatus": {
              "coding": [{
                "system": "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus",
                "code": "UNK",
                "display": "Unknown"
              }]
            },
            "communication": [
              {
                "language": {
                  "coding": [{
                    "system": "urn:ietf:bcp:47",
                    "code": "ar-SA",
                    "display": "Arabic (Saudi Arabia)"
                  }]
                },
                "preferred": true
              },
              {
                "language": {
                  "coding": [{
                    "system": "urn:ietf:bcp:47", 
                    "code": "en-US",
                    "display": "English (United States)"
                  }]
                },
                "preferred": false
              }
            ]
          }
          EOF
          
          # Saudi MOH compliance checklist
          cat > templates/saudi-moh/compliance_requirements.yml << 'EOF'
          saudi_moh_compliance:
            data_governance:
              data_residency:
                requirement: "Patient data must be stored within Saudi Arabia"
                implementation: "All databases hosted in Saudi data centers"
                verification: "Regular audits of data location"
              
              data_classification:
                personal_health_info: "Highest security level"
                administrative_data: "Medium security level"
                public_health_data: "Standard security level"
            
            security_requirements:
              encryption:
                at_rest: "AES-256"
                in_transit: "TLS 1.3 or higher"
                key_management: "Hardware Security Module (HSM)"
              
              access_controls:
                authentication: "Multi-factor authentication required"
                authorization: "Role-based access control (RBAC)"
                audit_logging: "Comprehensive access logging"
                session_management: "Secure session handling"
            
            interoperability:
              standards:
                fhir_version: "R4 or higher"
                hl7_support: "Required for message exchange"
                terminology: "SNOMED CT Arabic edition"
                coding_systems: "ICD-10-AM, CPT, Saudi-specific codes"
              
              apis:
                nphies_integration: "Mandatory for insurance claims"
                moh_systems: "Integration with national health systems"
                data_exchange: "Secure API endpoints"
            
            localization:
              language_support:
                primary: "Arabic (Saudi dialect)"
                secondary: "English"
                ui_rtl: "Right-to-left text support"
              
              cultural_considerations:
                calendar_system: "Both Gregorian and Hijri calendars"
                prayer_times: "Integration with Islamic prayer schedule"
                gender_segregation: "Respect for cultural preferences"
              
              regulatory_compliance:
                licensing: "MOH healthcare software license"
                data_protection: "Saudi Personal Data Protection Law"
                medical_device: "SFDA approval if applicable"
          
            audit_requirements:
              logging:
                user_actions: "All user interactions logged"
                data_access: "Complete audit trail"
                system_events: "Technical event logging"
                retention_period: "7 years minimum"
              
              reporting:
                compliance_reports: "Monthly compliance status"
                security_incidents: "Immediate reporting to authorities"
                performance_metrics: "System performance tracking"
          EOF

      - name: Create Cloudflare deployment infrastructure
        run: |
          mkdir -p infra/cloudflare/{tunnels,dns,workers}
          
          # Enhanced Cloudflare Tunnels setup script
          cat > infra/cloudflare/setup-tunnels.sh << 'EOF'
          #!/bin/bash
          
          # BrainSAIT LINC Cloudflare Tunnels Setup Script
          set -e
          
          echo "🌐 BrainSAIT LINC - Cloudflare Tunnels Setup"
          echo "============================================"
          
          # Configuration
          TUNNEL_NAME="brainsait-linc"
          TUNNEL_CONFIG_FILE="tunnel-config.yml"
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color
          
          echo_status() {
              echo -e "${BLUE}[INFO]${NC} $1"
          }
          
          echo_success() {
              echo -e "${GREEN}[SUCCESS]${NC} $1"
          }
          
          echo_warning() {
              echo -e "${YELLOW}[WARNING]${NC} $1"
          }
          
          echo_error() {
              echo -e "${RED}[ERROR]${NC} $1"
          }
          
          # Check if cloudflared is installed
          if ! command -v cloudflared &> /dev/null; then
              echo_status "Installing cloudflared..."
              
              # Detect OS and install accordingly
              if [[ "$OSTYPE" == "linux-gnu"* ]]; then
                  # Linux
                  wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
                  sudo dpkg -i cloudflared-linux-amd64.deb
                  rm cloudflared-linux-amd64.deb
              elif [[ "$OSTYPE" == "darwin"* ]]; then
                  # macOS
                  if command -v brew &> /dev/null; then
                      brew install cloudflared
                  else
                      echo_error "Please install Homebrew first or download cloudflared manually"
                      exit 1
                  fi
              else
                  echo_error "Unsupported operating system: $OSTYPE"
                  exit 1
              fi
              
              echo_success "cloudflared installed successfully"
          else
              echo_success "cloudflared is already installed"
          fi
          
          # Create tunnel configuration
          echo_status "Creating tunnel configuration..."
          
          cat > $TUNNEL_CONFIG_FILE << 'TUNNEL_EOF'
          # BrainSAIT LINC Agents Tunnel Configuration
          tunnel: TUNNEL_ID_PLACEHOLDER
          credentials-file: /etc/cloudflared/TUNNEL_ID_PLACEHOLDER.json
          
          # Logging
          loglevel: info
          
          # Ingress rules for all BrainSAIT LINC agents
          ingress:
            # Core Infrastructure
            - hostname: master.brainsait.io
              service: http://localhost:8000
              originRequest:
                httpHostHeader: master.brainsait.io
            
            - hostname: auth.brainsait.io
              service: http://localhost:8001
              originRequest:
                httpHostHeader: auth.brainsait.io
            
            # Healthcare Agents
            - hostname: doctor.brainsait.io
              service: http://localhost:8010
              originRequest:
                httpHostHeader: doctor.brainsait.io
            
            - hostname: nurse.brainsait.io
              service: http://localhost:8011
              originRequest:
                httpHostHeader: nurse.brainsait.io
            
            - hostname: patient.brainsait.io
              service: http://localhost:8012
              originRequest:
                httpHostHeader: patient.brainsait.io
            
            - hostname: careteam.brainsait.io
              service: http://localhost:8013
              originRequest:
                httpHostHeader: careteam.brainsait.io
            
            # Business Agents
            - hostname: biz.brainsait.io
              service: http://localhost:8020
              originRequest:
                httpHostHeader: biz.brainsait.io
            
            - hostname: pay.brainsait.io
              service: http://localhost:8021
              originRequest:
                httpHostHeader: pay.brainsait.io
            
            - hostname: insight.brainsait.io
              service: http://localhost:8022
              originRequest:
                httpHostHeader: insight.brainsait.io
            
            - hostname: oid.brainsait.io
              service: http://localhost:8023
              originRequest:
                httpHostHeader: oid.brainsait.io
            
            # Development & Automation Agents
            - hostname: dev.brainsait.io
              service: http://localhost:8030
              originRequest:
                httpHostHeader: dev.brainsait.io
            
            - hostname: auto.brainsait.io
              service: http://localhost:8031
              originRequest:
                httpHostHeader: auto.brainsait.io
            
            - hostname: code.brainsait.io
              service: http://localhost:8032
              originRequest:
                httpHostHeader: code.brainsait.io
            
            # Content & Communication Agents
            - hostname: media.brainsait.io
              service: http://localhost:8040
              originRequest:
                httpHostHeader: media.brainsait.io
            
            - hostname: edu.brainsait.io
              service: http://localhost:8041
              originRequest:
                httpHostHeader: edu.brainsait.io
            
            - hostname: chat.brainsait.io
              service: http://localhost:8042
              originRequest:
                httpHostHeader: chat.brainsait.io
            
            # Main website and documentation
            - hostname: brainsait.io
              service: http://localhost:3000
              originRequest:
                httpHostHeader: brainsait.io
            
            - hostname: www.brainsait.io
              service: http://localhost:3000
              originRequest:
                httpHostHeader: www.brainsait.io
            
            # API Gateway
            - hostname: api.brainsait.io
              service: http://localhost:8080
              originRequest:
                httpHostHeader: api.brainsait.io
            
            # Monitoring and Admin
            - hostname: monitor.brainsait.io
              service: http://localhost:9090
              originRequest:
                httpHostHeader: monitor.brainsait.io
            
            # Catch-all rule (must be last)
            - service: http_status:404
          TUNNEL_EOF
          
          echo_success "Tunnel configuration created: $TUNNEL_CONFIG_FILE"
          
          echo ""
          echo "🚀 Next Steps:"
          echo "=============="
          echo "1. Login to Cloudflare:"
          echo "   cloudflared tunnel login"
          echo ""
          echo "2. Create the tunnel:"
          echo "   cloudflared tunnel create $TUNNEL_NAME"
          echo ""
          echo "3. Update tunnel-config.yml with your tunnel ID"
          echo ""
          echo "4. Configure DNS records:"
          echo "   cloudflared tunnel route dns $TUNNEL_NAME master.brainsait.io"
          echo "   cloudflared tunnel route dns $TUNNEL_NAME doctor.brainsait.io"
          echo "   # ... (repeat for all subdomains)"
          echo ""
          echo "5. Run the tunnel:"
          echo "   cloudflared tunnel --config $TUNNEL_CONFIG_FILE run $TUNNEL_NAME"
          echo ""
          echo "📚 Documentation: https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/"
          echo "🎯 All 16 agents will be accessible via their respective subdomains"
          EOF
          
          chmod +x infra/cloudflare/setup-tunnels.sh
          
          # Create DNS automation script
          cat > infra/cloudflare/setup-dns.sh << 'EOF'
          #!/bin/bash
          
          # BrainSAIT LINC DNS Records Setup
          set -e
          
          TUNNEL_NAME="brainsait-linc"
